foreign WriteFile :: (
	hFile*: int,
	lpBuffer*: int,
	nNumberOfBytesToWrite: short,
	lpNumberOfBytesWritten: short,
	lpOverlapped*: int) -> void;

foreign GetStdHandle :: (handle: short) -> int*;
foreign ExitProcess :: (code: int) -> void;

foreign HeapAlloc :: (heap*: int, flags: int, size: int) -> int*; // Temporary
foreign GetProcessHeap :: () -> int*;

//itos :: (num: int, buffer: string) -> void
//{
	//var tbuf: byte[32];
	//var bchars: byte[10]; // 10 is end, null
	//bchars[0] = 48; // '0'
	//bchars[1] = 49; // '1'
	//bchars[2] = 50; // '2'
	//bchars[3] = 51; // '3'
	//bchars[4] = 52; // '4'
	//bchars[5] = 53; // '5'
	//bchars[6] = 54; // '6'
	//bchars[7] = 55; // '7'
	//bchars[8] = 56; // '8'
	//bchars[9] = 57; // '9'

	//var pos := 0;
	//var opos := 0;
	//var top := 0;
	//var x := 0;

	//repeat if num /= 0
	//{
		//x = i % 10;
		// tbuf[pos] = bchars[x];
		//pos = pos + 1;
		// num = num / 10;
	//}

	//top = pos;
	//pos = pos - 1;

	// opos = 0;
	// repeat if opos < top
	// {
		// buffer[opos] = tbuf[pos];
		// pos = pos - 1;
		// opos = opos + 1;
	// }

	// buffer[opos] = 0;
//}

strlen :: (str: string) -> int
{
    var len := 0;
    repeat if str[len] /= 0
    {
        len = len + 1;
    }

    ret -> len;
}

print :: (str: string) -> void
{
    var buffer*: int = GetStdHandle(-11);
    var len: int = strlen(str);
    WriteFile(buffer, str, len, 0, 0);
}

exit :: (code: int) -> void
{
    ExitProcess(code);
}

mem_alloc :: (size: int) -> int*
{
	var heap*: int = GetProcessHeap();
	var mem*: int = HeapAlloc(heap, 8, size);

	ret -> mem;
}

mem_free :: (mem*: int) -> void
{
}